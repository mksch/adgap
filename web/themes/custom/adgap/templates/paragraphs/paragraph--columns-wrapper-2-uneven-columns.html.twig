{#
/**
 * @file
 * Default theme implementation to display a paragraph:
 *  MODIFIED FOR TYPE: columns wrapper two uneven
 *
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# Renders Background field. #}
{% if content.field_background_color|render %}
    {% set background_settings = 'col_back_' ~ content.field_background_color['0']['#markup'] %}
{% endif %}

{# determine if there should be padding between columns #}
{% if content.field_column_spacing|render %}
	{% if content.field_column_spacing['0']['#markup'] == 'column--width-full' %}
  	{% set layout_width_settings = 'collapse' %}
  {% endif %}
{% endif %}

{% if content.field_top_padding|render %}
    {% set padding_settings = 'pad_' ~ content.field_top_padding['0']['#markup'] %}
{% endif %}
{% if content.field_bottom_padding|render %}
    {% set b_padding_settings = 'b_pad_' ~ content.field_bottom_padding['0']['#markup'] %}
{% endif %}

{# The select list in the content type for uneven column wrappers Looks like this key|value set.
 * Use that to add a class so we can style it to the appropriate size.
 * 66-33|2/3 - 1/3
 * 33-66|1/3 - 2/3
 * 75-25|3/4 - 1/4
 * 25-75|1/4 - 3/4
 * 
#}

{% if content.field_column_size|render %}
    {% set c_wrapper_settings = 'columns-wrapper-' ~ content.field_column_size['0']['#markup'] %}
{% endif %}


{# Booleans are strange - have to check this way #}
	{% if '1' in content.field_rounded_corners[0] %}
  	{% set rounded_settings = 'rounded' %}
	{% endif %}


{%
set classes = [
	'row',
	'paragraph',
	'columns-wrapper',
	c_wrapper_settings|clean_class,
  background_settings|clean_class,
  layout_width_settings|clean_class,
  padding_settings|clean_class,
  b_padding_settings|clean_class,
  rounded_settings|clean_class,
]
%}

{# data-equalizer is from foundation and makes columns the same height #}
{# Prints div with classes, and content without Width and Background. #}
<section{{ attributes.addClass(classes) }} data-equalizer data-equalize-on="medium">
	  {{ content|without('field_column_spacing', 'field_background_color', 'field_top_padding', 'field_bottom_padding', 'field_rounded_corners', 'field_column_size') }}
</section>
