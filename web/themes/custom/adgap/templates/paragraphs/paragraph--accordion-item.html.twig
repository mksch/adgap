{#
/**
 * @file
 * Default theme implementation to display a paragraph:
 *  MODIFIED FOR TYPE: ACCORDION ITEM
 *
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 *
 * HIA
 * header_level: set in preprocess function. Use this as the wrapper around the accordion prompt
 * field_accordion_content
 * field_ac_slice: a paragraph entity, after the content, can add more content from paragraphs
 * field_content_block: they have the ability to add a custom block in this accordion.
 * field_views_block: also could add a block from a view. 
 */
#}

{# A preprocess function looks at the parent accordion and sent us the header level for the prompt
#}

{% set prompt_tag = header_level is not empty ? header_level : 'p' %}

	<div class="accordion-row">
	<{{prompt_tag}} class="ac-prompt">{{ content.field_accordion_title }}</{{prompt_tag}}>
	<div class="ac-content">
		<div class="content-wrapper">
		
			{{ content.field_accordion_content }}
			{{ content.field_ac_slice }}
			
{# We're allowing you to insert a block or view after the body content in an accordion
#}			
			{% if content.field_content_block|render %}
					{{ content.field_content_block }}
			{% elseif content.field_views_block|render %}
					{{ content.field_views_block }}
			{% endif %}
			
		</div>
	</div>
	</div>
